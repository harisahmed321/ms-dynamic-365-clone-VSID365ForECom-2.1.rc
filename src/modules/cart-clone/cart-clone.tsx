/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { IOrderSummaryLines, OrderSummary } from '@msdyn365-commerce-modules/order-summary-utilities';
import { Button, INodeProps, Waiting } from '@msdyn365-commerce-modules/utilities';
import { IWishlistActionSuccessResult, PromoCodeComponent } from '@msdyn365-commerce/components';
import { getUrlSync, IImageSettings } from '@msdyn365-commerce/core';
import { ICartState } from '@msdyn365-commerce/global-state';
import { CartLine } from '@msdyn365-commerce/retail-proxy';
import classnames from 'classnames';
import { observer } from 'mobx-react';
import React from 'react';
import { ICartCloneData } from './cart-clone.data';
import { ICartCloneProps } from './cart-clone.props.autogenerated';
import { CartLineItems, ICartlinesViewProps } from './components/cart-clone-line-items';

export interface ICartViewProps extends ICartCloneProps<ICartCloneData> {
    className: string;
    title?: React.ReactNode;
    CartlinesWrapper: INodeProps;
    cartlines?: ICartlinesViewProps[];
    cart: ICartState | undefined;
    orderSummaryHeading: React.ReactNode;
    orderSummaryLineitems?: IOrderSummaryLines;
    OrderSummaryWrapper: INodeProps;
    OrderSummaryItems: INodeProps;
    checkoutAsGuestButton: React.ReactNode;
    checkoutAsSignInUserButton: React.ReactNode;
    storeSelector?: React.ReactNode;
    backToShoppingButton: React.ReactNode;
    waitingComponent: React.ReactNode;
    promoCode: React.ReactNode;
    cartLoadingStatus: string;
    cartDataResult: boolean;
    removeItemClickHandler(cartlineToRemove: CartLine): void;
    moveToWishlistSuccessHandler(result: IWishlistActionSuccessResult, cartlineId: CartLine): void;
}

/**
 *
 * Cart component
 * @extends {React.PureComponent<ICartCloneProps<ICartCloneData>>}
 */
@observer
class Cart extends React.Component<ICartCloneProps<ICartCloneData>> {
    // tslint:disable-next-line:cyclomatic-complexity max-func-body-length
    public render(): JSX.Element | null {
        const {
            data: {
                cart: { result: cart },
                wishlists: { result: wishlists }
            },
            context: {
                request: {
                    user: { isAuthenticated, signInUrl }
                }
            },
            config: config,
            telemetry,
            resources
        } = this.props;

        const channelConfiguration = this.props.context && this.props.context.request && this.props.context.request.channel;
        const imageSettings = this._getImageSettings(config.imageSettings);
        const guestCheckoutUrl = getUrlSync('checkout', this.props.context.actionContext) || '';
        const backToShoppingUrl = getUrlSync('home', this.props.context.actionContext) || '';
        const checkoutURL = this._getCheckoutURL(isAuthenticated, guestCheckoutUrl, signInUrl || '');
        const isCartEmpty = cart && cart.cart.CartLines && cart.cart.CartLines.length === 0;

        const viewProps = {
            ...this.props,
            className: classnames('ms-cart'),
            title: <h1 className={'msc-cart__heading'}>{resources.cartTitle}</h1>,
            CartlinesWrapper: { className: 'msc-cartline-wraper' },
            OrderSummaryWrapper: { className: 'msc-order-summary-wrapper' },
            OrderSummaryItems: { className: 'msc-order-summary__items' },
            cartlines:
                this.props.data.products && this.props.data.products.result && cart && cart.cart.CartLines && cart.cart.CartLines.length > 0
                    ? CartLineItems({
                          cartlines: cart.cart.CartLines,
                          products: this.props.data.products.result,
                          productAvailabilites: this.props.data.productAvailabilites.result,
                          imageSettings: imageSettings,
                          outOfStockThreshold: this.props.context.app.config.outOfStockThreshold || 10,
                          isStockCheckEnabled: this.props.context.app.config.enableStockCheck || false,
                          maxCartlineQuantity: this.props.context.app.config.maxQuantityForCartLineItem,
                          gridSettings: this.props.context.request.gridSettings!,
                          context: this.props.context,
                          typeName: this.props.typeName,
                          id: this.props.id,
                          resources: {
                              sizeString: resources.productDimensionTypeSize,
                              colorString: resources.productDimensionTypeColor,
                              configString: 'asd',
                              styleString: resources.productDimensionTypeStyle,
                              quantityDisplayString: resources.quantityDisplayText,
                              inputQuantityAriaLabel: resources.inputQuantityAriaLabel,
                              discountStringText: resources.discountStringText
                          },
                          telemetry: telemetry,
                          addToWishlistButtonText: resources.addToWishlistButtonText,
                          removeFromWishlistButtonText: resources.removeFromWishlistButtonText,
                          removeButtonText: resources.removeCartButtonText,
                          shipItText: resources.shipInsteadDisplayText,
                          pickitUpText: resources.pickItUpDisplayText,
                          changeStoreText: resources.changeStoreDisplayText,
                          storeSelectorStateManager: this.props.data.storeSelectorStateManager.result,
                          cartState: this.props.data.cart.result,
                          orgUnitLocations: this.props.data.orgUnitLocations.result,
                          removeItemClickHandler: this._removeItemFromCartHandler,
                          moveToWishlistSuccessHandler: this._moveToWishlistSuccessHandler,
                          updateCartLinesQuantitySuccessHandler: this._updateCartlineQuantity,
                          wishlists: wishlists,
                          defaultWishlistName: resources.defaultWishlistName,
                          avgRating: this.props.config.rating || 0
                      })
                    : undefined,
            promoCode: cart && (
                <PromoCodeComponent
                    cart={cart}
                    promoCodeHeadingText={resources.promoCodeHeadingText}
                    promoPlaceholderText={resources.promoPlaceholderText}
                    promoCodeApplyButtonText={resources.promoCodeApplyButtonText}
                    appliedPromoCodeHeadingText={resources.appliedPromoCodeHeadingText}
                    collapseTimeOut={350}
                    removePromoAriaLabelFormat={resources.removePromoAriaLabelFormat}
                    removePromoText={resources.removePromoText}
                    invalidPromoCodeErrorText={resources.invalidPromoCodeErrorText}
                    failedToAddPromoCodeErrorText={resources.failedToAddPromoCodeErrorText}
                    failedToRemovePromoCodeErrorText={resources.failedToRemovePromoCodeErrorText}
                    duplicatePromoCodeErrorText={resources.duplicatePromotionErrorText}
                    context={this.props.context}
                    id={this.props.id}
                    typeName={this.props.typeName}
                    data={{}}
                />
            ),
            cart: this.props.data.cart.result,
            context: this.props.context,
            typeName: this.props.typeName,
            telemetry: this.props.telemetry,
            id: this.props.id,
            removePromoAriaLabelFormat: resources.removePromoAriaLabelFormat,
            orderSummaryHeading:
                this.props.data.products &&
                this.props.data.products.result &&
                cart &&
                cart.cart.CartLines &&
                cart.cart.CartLines.length > 0 ? (
                    <h2 className={'msc-order-summary__heading'}>{resources.orderSummaryTitle}</h2>
                ) : null,
            orderSummaryLineitems:
                cart && cart.cart && channelConfiguration && cart.cart.CartLines && cart.cart.CartLines.length > 0
                    ? OrderSummary({
                          cart: cart.cart,
                          subTotalLabel: resources.itemsWithCountLabel,
                          shippingLabel: resources.estimatedShippingLabel,
                          taxLabel: resources.estimatedTaxLabel,
                          orderTotalLabel: resources.orderTotal,
                          totalDiscountsLabel: resources.totalDiscountsLabel,
                          context: this.props.context,
                          typeName: this.props.typeName,
                          id: this.props.id,
                          toBeCalculatedText: resources.yetToBeCalculatedText,
                          freeText: resources.priceFree,
                          channelConfiguration: channelConfiguration,
                          telemetry: telemetry
                      })
                    : undefined,
            checkoutAsSignInUserButton: !isCartEmpty ? (
                <Button className={'msc-cart__btn-checkout'} href={checkoutURL} title={resources.checkoutButtonTitle}>
                    {resources.checkoutButtonTitle}
                </Button>
            ) : null,
            checkoutAsGuestButton:
                !isCartEmpty && !isAuthenticated ? (
                    <Button className={'msc-cart__btn-guestcheckout'} href={guestCheckoutUrl} title={resources.guestCheckoutButtonTitle}>
                        {resources.guestCheckoutButtonTitle}
                    </Button>
                ) : null,
            backToShoppingButton: (
                <Button className={'msc-cart__btn-backtoshopping'} href={backToShoppingUrl} title={resources.backToShoppingButtonTitle}>
                    {resources.backToShoppingButtonTitle}
                </Button>
            ),
            storeSelector:
                this.props.slots.storeSelector && this.props.slots.storeSelector.length > 0 ? this.props.slots.storeSelector[0] : null,
            removeItemClickHandler: this._removeItemFromCartHandler,
            moveToWishlistSuccessHandler: this._moveToWishlistSuccessHandler,
            waitingComponent: <Waiting className='msc-waiting-circular msc-waiting-lg' />,
            cartLoadingStatus: this.props.data.cart.status === 'FAILED' ? this.props.resources.cartLoadingErrorMessage : null,
            cartDataResult: this.props.data.cart.result && this.props.data.cart.result.isEmpty
        };
        console.log(this.props.config);
        return this.props.renderView(viewProps) as React.ReactElement;
    }

    private _getCheckoutURL(isAuthenticated: boolean, guestCheckoutUrl: string, signInUrl: string): string {
        if (isAuthenticated) {
            return guestCheckoutUrl;
        }

        const absoluteUrlRegExp = new RegExp('^(?:[a-z]+:)?//', 'i');
        const isAbsoluteUrl = absoluteUrlRegExp.test(guestCheckoutUrl);
        let returnURL = guestCheckoutUrl;
        if (window && !isAbsoluteUrl) {
            returnURL = `${window.location.origin}${guestCheckoutUrl}`;
        }

        return `${signInUrl}${signInUrl.indexOf('?') === -1 ? '?' : '&'}ru=${returnURL}`;
    }

    private _getImageSettings = (imageSettings: IImageSettings | undefined): IImageSettings => {
        return (
            imageSettings || {
                viewports: {
                    xs: { q: `w=80&h=94&m=6`, w: 0, h: 0 },
                    sm: { q: `w=148&h=174&m=6`, w: 0, h: 0 },
                    lg: { q: `w=148&h=174&m=6`, w: 0, h: 0 }
                },
                lazyload: true
            }
        );
    };

    private _removeItemFromCartHandler = (cartlineToRemove: CartLine) => {
        if (this.props.data.cart.result) {
            const input = {
                cartLineIds: [cartlineToRemove.LineId!.toString()]
            };
            this.props.data.cart.result.removeCartLines(input).catch(error => {
                this.props.telemetry.warning(error);
                this.props.telemetry.debug('Unable to Remove Cart Line');
            });
        }
    };

    private _moveToWishlistSuccessHandler = (result: IWishlistActionSuccessResult, cartline?: CartLine) => {
        if (result.status === 'ADDED' && cartline) {
            this._removeItemFromCartHandler(cartline);
        }
    };

    private _updateCartlineQuantity = (cartlineToUpdate: CartLine, quantity: number) => {
        if (this.props.data.cart.result) {
            const input = {
                cartLineId: cartlineToUpdate.LineId!.toString(),
                newQuantity: quantity
            };
            this.props.data.cart.result.updateCartLineQuantity(input).catch(error => {
                this.props.telemetry.warning(error);
                this.props.telemetry.debug('Unable to update Cart Line quantity');
            });
        }
    };
}

export default Cart;
