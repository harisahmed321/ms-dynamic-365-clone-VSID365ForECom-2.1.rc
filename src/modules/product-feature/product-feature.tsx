/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import * as React from 'react';

// import getSimpleProductAction, { ProductInput } from '../../actions/get-product';
import getPostAction, { PostInput } from '../../actions/posts';
import { IProductFeatureData } from './product-feature.data';
// tslint:disable-next-line: ordered-imports
import { IProductFeatureProps, imageAlignment } from './product-feature.props.autogenerated';
import getUserAction, { UserInput } from '../../actions/user';
import getUserWithPostsAction from '../../actions/user-with-posts';

export interface IProductFeatureViewProps extends IProductFeatureProps<IProductFeatureData> {
    productName: string;
    productInfo: string;
    productImageUrl: string;
    productPrice: string;
    buttonInfo: string;
    alignment: imageAlignment;
    textColor: string;
    btnClickMe: any;
}

/**
 *
 * ProductFeature component
 * @extends {React.PureComponent<IProductFeatureProps<IProductFeatureData>>}
 */
class ProductFeature extends React.PureComponent<IProductFeatureProps<IProductFeatureData>> {
    public onBtnClickMe = async () => {
        console.log('btn click');
        const userId = 1;
        const userActionInput = new UserInput(userId);
        const userWithPosts = await getUserWithPostsAction(userActionInput, this.props.context.actionContext);
        console.log('userWithPosts', userWithPosts);
        // const user = await getUserAction(userActionInput, this.props.context.actionContext);
        // console.log('user', user);
        // const postActionInput = new PostInput(userId);
        // const posts = await getPostAction(postActionInput, this.props.context.actionContext);
        // console.log('posts', posts);
        // const channelId = 68719478279;
        // const productId = 68719498121;
        // const actionInput = new ProductInput(channelId, productId);
        // const product = await getSimpleProductAction(actionInput, this.props.context.actionContext);
        // console.log('product', product);
    };

    public render(): JSX.Element | null {
        const { config } = this.props;

        // set default product info values
        const ProductName = config.productTitle ? config.productTitle : 'No product name defined';
        const ProductInfo = config.productDetails ? config.productDetails.toString() : 'No product details defined';
        const ProductImageUrl = config.productImage ? config.productImage.src : '';
        const ButtonInfo = config.buttonText ? config.buttonText : 'No button text defined';
        const ProductPrice = '129';

        const ProductFeatureViewProps = {
            ...this.props,
            productName: ProductName,
            productInfo: ProductInfo,
            productImageUrl: ProductImageUrl,
            productPrice: ProductPrice,
            buttonInfo: ButtonInfo,
            alignment: config.imageAlignment,
            textColor: config.textColor,
            btnClickMe: this.onBtnClickMe
        };
        // console.log('products', this.props.data.product);
        // console.log('simpleProductWithAvailablility', this.props.data);
        return this.props.renderView(ProductFeatureViewProps);
    }
}

export default ProductFeature;
